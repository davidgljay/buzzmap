{
  "name": "twitter-node",
  "description": "node.js stream API for the twitter streaming HTTP API",
  "version": "0.0.2",
  "author": {
    "name": "technoweenie"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/technoweenie/twitter-node.git"
  },
  "engine": [
    "node >=0.2.0"
  ],
  "main": "./lib/twitter-node",
  "readme": "# twitter-node\n\nCreates a streaming connection with twitter, and pushes any incoming statuses to a tweet event.\n\n## Installation\n\nDepends on ntest.\n\nUse NPM:\n\n    npm install twitter-node\n\nOtherwise create a symlink in `~/.node_libraries`\n\n    $ ln -s /path/to/twitter-node/lib/twitter-node ~/.node_libraries/twitter-node\n\n## Events\n\nTwitterNode emits these events:\n\n* tweet(json) - This is emitted when a new tweet comes in.  This will be a parsed JSON object.\n* limit(json) - This is emitted when a new limit command comes in.  Currently, limit detection only works with parsed JSON objects.\n* delete(json) - This is emitted when a new delete command comes in.  Currently, delete detection only works with parsed JSON objects.\n* end(response) - This is emitted when the http connection is closed.  The HTTP response object is sent.\n\nSee the [streaming API docs][api-docs] for examples of the limit and delete commands.\n\n[api-docs]: http://apiwiki.twitter.com/Streaming-API-Documentation\n\n## Usage\n\n    // twitter-node does not modify GLOBAL, that's so rude\n    var TwitterNode = require('twitter-node').TwitterNode\n      , sys         = require('sys')\n\n    // you can pass args to create() or set them on the TwitterNode instance\n    var twit = new TwitterNode({\n      user: 'username', \n      password: 'password',\n      host: 'my_proxy.my_company.com',         // proxy server name or ip addr\n      port: 8080,\t\t\t\t\t\t\t   // proxy port!\n      track: ['baseball', 'football'],         // sports!\n      follow: [12345, 67890],                  // follow these random users\n      locations: [-122.75, 36.8, -121.75, 37.8] // tweets in SF\n    });\n\n    // adds to the track array set above\n    twit.track('foosball');\n\n    // adds to the following array set above\n    twit.follow(2345);\n\n    // follow tweets from NYC\n    twit.location(-74, 40, -73, 41)\n\n    // http://apiwiki.twitter.com/Streaming-API-Documentation#QueryParameters\n    twit.params['count'] = 100;\n\n    // http://apiwiki.twitter.com/Streaming-API-Documentation#Methods\n    twit.action = 'sample'; // 'filter' is default\n\n    twit.headers['User-Agent'] = 'whatever';\n\n    // Make sure you listen for errors, otherwise\n    // they are thrown\n    twit.addListener('error', function(error) {\n      console.log(error.message);\n    });\n\n    twit\n      .addListener('tweet', function(tweet) {\n        sys.puts(\"@\" + tweet.user.screen_name + \": \" + tweet.text);\n      })\n\n      .addListener('limit', function(limit) {\n        sys.puts(\"LIMIT: \" + sys.inspect(limit));\n      })\n\n      .addListener('delete', function(del) {\n        sys.puts(\"DELETE: \" + sys.inspect(del));\n      })\n\n      .addListener('end', function(resp) {\n        sys.puts(\"wave goodbye... \" + resp.statusCode);\n      })\n\n      .stream();\n      \n    // We can also add things to track on-the-fly\n    twit.track('#nowplaying');\n    twit.follow(1234);\n    \n    // This will reset the stream\n    twit.stream();\n\n## Pre-Launch Checklist\n\nSee http://apiwiki.twitter.com/Streaming-API-Documentation.  Keep these points in mind when getting ready to use TwitterNode in production:\n\n* Not purposefully attempting to circumvent access limits and levels?\n* Creating the minimal number of connections?\n* Avoiding duplicate logins?\n* Backing off from failures: none for first disconnect, seconds for repeated network (TCP/IP) level issues, minutes for repeated HTTP (4XX codes)?\n* Using long-lived connections?\n* Tolerant of other objects and newlines in markup stream? (Non <status> objects...)\n* Tolerant of duplicate messages?\n\n## TODO\n\n* Handle failures as recommended from the Twitter stream documentation.\n\n## \\m/\n\n* Tim Smart\n* Matt Secoske (secos)\n* kompozer\n* Twitter\n\n## Note on Patches/Pull Requests\n \n* Fork the project.\n* Make your feature addition or bug fix.\n* Add tests for it. This is important so I don't break it in a\n  future version unintentionally.\n* Commit, do not mess with version or history.\n  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)\n* Send me a pull request. Bonus points for topic branches.\n\n## Copyright\n\nCopyright (c) 2010 rick. See LICENSE for details.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/technoweenie/twitter-node/issues"
  },
  "_id": "twitter-node@0.0.2",
  "dist": {
    "shasum": "0853841741095dadfe73254a94c248bdeb75807f"
  },
  "_from": "twitter-node@",
  "_resolved": "https://registry.npmjs.org/twitter-node/-/twitter-node-0.0.2.tgz"
}
